/**
 * This class is generated by jOOQ
 */
package gsch.tables.records;


import gsch.tables.People;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PeopleRecord extends UpdatableRecordImpl<PeopleRecord> implements Record3<Long, String, Integer> {

    private static final long serialVersionUID = -1607972254;

    /**
     * Setter for <code>public.people.id</code>.
     */
    public PeopleRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.people.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.people.name</code>.
     */
    public PeopleRecord setName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.people.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.people.age</code>.
     */
    public PeopleRecord setAge(Integer value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.people.age</code>.
     */
    public Integer getAge() {
        return (Integer) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<Long, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<Long, String, Integer> valuesRow() {
        return (Row3) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field1() {
        return People.PEOPLE.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return People.PEOPLE.NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field3() {
        return People.PEOPLE.AGE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value3() {
        return getAge();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PeopleRecord value1(Long value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PeopleRecord value2(String value) {
        setName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PeopleRecord value3(Integer value) {
        setAge(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PeopleRecord values(Long value1, String value2, Integer value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PeopleRecord
     */
    public PeopleRecord() {
        super(People.PEOPLE);
    }

    /**
     * Create a detached, initialised PeopleRecord
     */
    public PeopleRecord(Long id, String name, Integer age) {
        super(People.PEOPLE);

        set(0, id);
        set(1, name);
        set(2, age);
    }
}
