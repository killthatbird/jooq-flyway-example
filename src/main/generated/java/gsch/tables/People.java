/**
 * This class is generated by jOOQ
 */
package gsch.tables;


import gsch.Keys;
import gsch.Public;
import gsch.tables.records.PeopleRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class People extends TableImpl<PeopleRecord> {

    private static final long serialVersionUID = 805382838;

    /**
     * The reference instance of <code>public.people</code>
     */
    public static final People PEOPLE = new People();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PeopleRecord> getRecordType() {
        return PeopleRecord.class;
    }

    /**
     * The column <code>public.people.id</code>.
     */
    public final TableField<PeopleRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('people_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.people.name</code>.
     */
    public final TableField<PeopleRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(250), this, "");

    /**
     * The column <code>public.people.age</code>.
     */
    public final TableField<PeopleRecord, Integer> AGE = createField("age", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>public.people</code> table reference
     */
    public People() {
        this("people", null);
    }

    /**
     * Create an aliased <code>public.people</code> table reference
     */
    public People(String alias) {
        this(alias, PEOPLE);
    }

    private People(String alias, Table<PeopleRecord> aliased) {
        this(alias, aliased, null);
    }

    private People(String alias, Table<PeopleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PeopleRecord, Long> getIdentity() {
        return Keys.IDENTITY_PEOPLE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PeopleRecord> getPrimaryKey() {
        return Keys.PEOPLE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PeopleRecord>> getKeys() {
        return Arrays.<UniqueKey<PeopleRecord>>asList(Keys.PEOPLE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public People as(String alias) {
        return new People(alias, this);
    }

    /**
     * Rename this table
     */
    public People rename(String name) {
        return new People(name, null);
    }
}
